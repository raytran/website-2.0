import{S as n,i as s,s as a,B as t,j as p,m as e,o,p as c,q as u,x as l,u as i,v as r,X as k,e as h,t as m,k as d,c as f,a as g,g as w,d as y,n as b,b as v,R as _,J as P,f as S,G as I,H as A}from"./vendor-6faa5744.js";import{P as T}from"./ProjectPage-8d746a0a.js";function E(n){let s,a,t,p,e,o,c,u,l,i,r,k,T,E,x,H,M,N,D,$,O,G,R,j,C,z,U,F,L,W,q,K,B,J,V,X,Q,Y,Z,nn,sn,an,tn,pn,en,on,cn,un,ln,rn,kn,hn,mn,dn,fn,gn,wn,yn,bn,vn,_n,Pn,Sn,In,An,Tn,En,xn,Hn,Mn,Nn,Dn,$n,On,Gn,Rn,jn,Cn,zn,Un,Fn,Ln,Wn,qn,Kn,Bn,Jn,Vn,Xn,Qn,Yn,Zn,ns,ss,as,ts,ps,es;return{c(){s=h("h1"),a=m("Automated Nerf Gun Turret"),t=d(),p=h("ul"),e=h("li"),o=h("a"),c=m("Hardware"),u=d(),l=h("li"),i=h("a"),r=m("Software"),k=d(),T=h("h2"),E=m("Hardware"),x=d(),H=h("h3"),M=m("Mechanical"),N=d(),D=h("p"),$=m("Prior to my Fall 2020 semester at MIT, I had no experience at all with CAD. I took a 6-unit course called 15.S20 Design for 3D Printing\nwhich gave me a good run through of 3D design techniques. I am by no means a mechanical engineer, and probably never will be,\nbut my elementary CAD skills were enough for this project."),O=d(),G=h("img"),j=d(),C=h("p"),z=m("Here is the base, which consists of two large holes surrounded by mounting holes: one for the stepper motor and the other for the wires from the main assembly.\nNotice that the smaller hole (wires) has the 4 mounting holes for the lazy susan in addition to 3 holes arranged in a triangle.\nThe three holes are (or rather, "),U=h("em"),F=m("were supposed to be"),L=m(") for a "),W=h("a"),q=m("slip ring"),K=m(". More on this later."),B=d(),J=h("img"),X=d(),Q=h("p"),Y=m("On top of the base is this set of gears which provides more torque from the stepper motor through a 5:1 gear reduction.\nThis ends up being quite important since the top half is almost 4lbs heavy."),Z=d(),nn=h("img"),an=d(),tn=h("p"),pn=m("Mounted on the gears is the walls, which are used to hold the nerf gun up. Notice that the left wall has a slot\ncut out from it; this is used to mount the servo which controls the angle of the nerf gun."),en=d(),on=h("img"),un=d(),ln=h("p"),rn=m("And finally, mounted on the walls through the set of lazy susans is the gun mount. I took advantage of NERF’s tactical rail system\nand simply printed the railing onto some cylinders. Also note that the left mount is slightly extended; this is to interface with the servo on the wall."),kn=d(),hn=h("img"),dn=d(),fn=h("h3"),gn=m("Electrical"),wn=d(),yn=h("p"),bn=m("On the electronics side of things, the turret uses an Arduino Nano hooked up to a stepper motor driver (for the gears), the servo, and to two relays (for the flywheel and the pusher on the nerf gun)."),vn=d(),_n=h("h3"),Pn=m("A problem"),Sn=d(),In=h("p"),An=m("Initially, I used a slip ring that passes through the center of the turret"),Tn=h("br"),En=m("\nI should’ve seen this coming, but there was too much noise in the slip ring to transfer USB 2.0 webcam data through.\nI resolved this issue by simply removing the slip ring and running the wires straight through the hole.\nThis does mean that the turret will tangle itself in its own wires after a few revolutions, but this ends up not being\nan issue at all most of the time."),xn=d(),Hn=h("h2"),Mn=m("Software"),Nn=d(),Dn=h("p"),$n=m("Now that the hardware was assembled, it was time to program the turret. On the macro scale, the arduino receives control signals\nover serial from a computer vision script on my laptop."),On=d(),Gn=h("h3"),Rn=m("Arduino-side"),jn=d(),Cn=h("p"),zn=m("The arduino code is extremely simple; it decodes characters over serial and applies the given command to the motors.\nIt is short enough to be displayed here in its entirety:"),Un=d(),Fn=h("pre"),Ln=d(),Wn=h("h3"),qn=m("Computer-side"),Kn=d(),Bn=h("p"),Jn=m("I used the python API available from\n"),Vn=h("a"),Xn=m("OpenPose"),Qn=m(" to detect people in the camera frame. The system\nuses a PID controller to manipulate both the stepper motor and the server motor to keep the center of the camera aligned with the\ncenter of mass of the person. This code is also extremely short; the majority of the code is merely setup."),Yn=d(),Zn=h("p"),ns=m("Here is the important part (camera loop):"),ss=d(),as=h("pre"),ts=d(),ps=h("p"),es=m("Although the implementation is simple, the results are surprisingly good."),this.h()},l(n){s=f(n,"H1",{});var h=g(s);a=w(h,"Automated Nerf Gun Turret"),h.forEach(y),t=b(n),p=f(n,"UL",{});var m=g(p);e=f(m,"LI",{});var d=g(e);o=f(d,"A",{href:!0});var v=g(o);c=w(v,"Hardware"),v.forEach(y),d.forEach(y),u=b(m),l=f(m,"LI",{});var _=g(l);i=f(_,"A",{href:!0});var P=g(i);r=w(P,"Software"),P.forEach(y),_.forEach(y),m.forEach(y),k=b(n),T=f(n,"H2",{});var S=g(T);E=w(S,"Hardware"),S.forEach(y),x=b(n),H=f(n,"H3",{});var I=g(H);M=w(I,"Mechanical"),I.forEach(y),N=b(n),D=f(n,"P",{});var A=g(D);$=w(A,"Prior to my Fall 2020 semester at MIT, I had no experience at all with CAD. I took a 6-unit course called 15.S20 Design for 3D Printing\nwhich gave me a good run through of 3D design techniques. I am by no means a mechanical engineer, and probably never will be,\nbut my elementary CAD skills were enough for this project."),A.forEach(y),O=b(n),G=f(n,"IMG",{alt:!0,style:!0,src:!0}),j=b(n),C=f(n,"P",{});var R=g(C);z=w(R,"Here is the base, which consists of two large holes surrounded by mounting holes: one for the stepper motor and the other for the wires from the main assembly.\nNotice that the smaller hole (wires) has the 4 mounting holes for the lazy susan in addition to 3 holes arranged in a triangle.\nThe three holes are (or rather, "),U=f(R,"EM",{});var V=g(U);F=w(V,"were supposed to be"),V.forEach(y),L=w(R,") for a "),W=f(R,"A",{href:!0,rel:!0});var sn=g(W);q=w(sn,"slip ring"),sn.forEach(y),K=w(R,". More on this later."),R.forEach(y),B=b(n),J=f(n,"IMG",{alt:!0,style:!0,src:!0}),X=b(n),Q=f(n,"P",{});var cn=g(Q);Y=w(cn,"On top of the base is this set of gears which provides more torque from the stepper motor through a 5:1 gear reduction.\nThis ends up being quite important since the top half is almost 4lbs heavy."),cn.forEach(y),Z=b(n),nn=f(n,"IMG",{alt:!0,style:!0,src:!0}),an=b(n),tn=f(n,"P",{});var mn=g(tn);pn=w(mn,"Mounted on the gears is the walls, which are used to hold the nerf gun up. Notice that the left wall has a slot\ncut out from it; this is used to mount the servo which controls the angle of the nerf gun."),mn.forEach(y),en=b(n),on=f(n,"IMG",{alt:!0,style:!0,src:!0}),un=b(n),ln=f(n,"P",{});var os=g(ln);rn=w(os,"And finally, mounted on the walls through the set of lazy susans is the gun mount. I took advantage of NERF’s tactical rail system\nand simply printed the railing onto some cylinders. Also note that the left mount is slightly extended; this is to interface with the servo on the wall."),os.forEach(y),kn=b(n),hn=f(n,"IMG",{alt:!0,style:!0,src:!0}),dn=b(n),fn=f(n,"H3",{});var cs=g(fn);gn=w(cs,"Electrical"),cs.forEach(y),wn=b(n),yn=f(n,"P",{});var us=g(yn);bn=w(us,"On the electronics side of things, the turret uses an Arduino Nano hooked up to a stepper motor driver (for the gears), the servo, and to two relays (for the flywheel and the pusher on the nerf gun)."),us.forEach(y),vn=b(n),_n=f(n,"H3",{});var ls=g(_n);Pn=w(ls,"A problem"),ls.forEach(y),Sn=b(n),In=f(n,"P",{});var is=g(In);An=w(is,"Initially, I used a slip ring that passes through the center of the turret"),Tn=f(is,"BR",{}),En=w(is,"\nI should’ve seen this coming, but there was too much noise in the slip ring to transfer USB 2.0 webcam data through.\nI resolved this issue by simply removing the slip ring and running the wires straight through the hole.\nThis does mean that the turret will tangle itself in its own wires after a few revolutions, but this ends up not being\nan issue at all most of the time."),is.forEach(y),xn=b(n),Hn=f(n,"H2",{});var rs=g(Hn);Mn=w(rs,"Software"),rs.forEach(y),Nn=b(n),Dn=f(n,"P",{});var ks=g(Dn);$n=w(ks,"Now that the hardware was assembled, it was time to program the turret. On the macro scale, the arduino receives control signals\nover serial from a computer vision script on my laptop."),ks.forEach(y),On=b(n),Gn=f(n,"H3",{});var hs=g(Gn);Rn=w(hs,"Arduino-side"),hs.forEach(y),jn=b(n),Cn=f(n,"P",{});var ms=g(Cn);zn=w(ms,"The arduino code is extremely simple; it decodes characters over serial and applies the given command to the motors.\nIt is short enough to be displayed here in its entirety:"),ms.forEach(y),Un=b(n),Fn=f(n,"PRE",{class:!0}),g(Fn).forEach(y),Ln=b(n),Wn=f(n,"H3",{});var ds=g(Wn);qn=w(ds,"Computer-side"),ds.forEach(y),Kn=b(n),Bn=f(n,"P",{});var fs=g(Bn);Jn=w(fs,"I used the python API available from\n"),Vn=f(fs,"A",{href:!0,rel:!0});var gs=g(Vn);Xn=w(gs,"OpenPose"),gs.forEach(y),Qn=w(fs," to detect people in the camera frame. The system\nuses a PID controller to manipulate both the stepper motor and the server motor to keep the center of the camera aligned with the\ncenter of mass of the person. This code is also extremely short; the majority of the code is merely setup."),fs.forEach(y),Yn=b(n),Zn=f(n,"P",{});var ws=g(Zn);ns=w(ws,"Here is the important part (camera loop):"),ws.forEach(y),ss=b(n),as=f(n,"PRE",{class:!0}),g(as).forEach(y),ts=b(n),ps=f(n,"P",{});var ys=g(ps);es=w(ys,"Although the implementation is simple, the results are surprisingly good."),ys.forEach(y),this.h()},h(){v(o,"href","#hardware"),v(i,"href","#software"),v(G,"alt","Turret"),_(G,"width","100%"),P(G.src,R="/nerf-turret/turret-overall.png")||v(G,"src","/nerf-turret/turret-overall.png"),v(W,"href","https://en.wikipedia.org/wiki/Slip_ring"),v(W,"rel","nofollow"),v(J,"alt","Turret base"),_(J,"width","100%"),P(J.src,V="/nerf-turret/turret-base.png")||v(J,"src","/nerf-turret/turret-base.png"),v(nn,"alt","Turret gears"),_(nn,"width","100%"),P(nn.src,sn="/nerf-turret/turret-gears.png")||v(nn,"src","/nerf-turret/turret-gears.png"),v(on,"alt","Turret walls"),_(on,"width","100%"),P(on.src,cn="/nerf-turret/turret-walls.png")||v(on,"src","/nerf-turret/turret-walls.png"),v(hn,"alt","Turret gun mount"),_(hn,"width","100%"),P(hn.src,mn="/nerf-turret/turret-gunmount.png")||v(hn,"src","/nerf-turret/turret-gunmount.png"),v(Fn,"class","language-cpp"),v(Vn,"href","https://github.com/CMU-Perceptual-Computing-Lab/openpose"),v(Vn,"rel","nofollow"),v(as,"class","language-python")},m(n,h){S(n,s,h),I(s,a),S(n,t,h),S(n,p,h),I(p,e),I(e,o),I(o,c),I(p,u),I(p,l),I(l,i),I(i,r),S(n,k,h),S(n,T,h),I(T,E),S(n,x,h),S(n,H,h),I(H,M),S(n,N,h),S(n,D,h),I(D,$),S(n,O,h),S(n,G,h),S(n,j,h),S(n,C,h),I(C,z),I(C,U),I(U,F),I(C,L),I(C,W),I(W,q),I(C,K),S(n,B,h),S(n,J,h),S(n,X,h),S(n,Q,h),I(Q,Y),S(n,Z,h),S(n,nn,h),S(n,an,h),S(n,tn,h),I(tn,pn),S(n,en,h),S(n,on,h),S(n,un,h),S(n,ln,h),I(ln,rn),S(n,kn,h),S(n,hn,h),S(n,dn,h),S(n,fn,h),I(fn,gn),S(n,wn,h),S(n,yn,h),I(yn,bn),S(n,vn,h),S(n,_n,h),I(_n,Pn),S(n,Sn,h),S(n,In,h),I(In,An),I(In,Tn),I(In,En),S(n,xn,h),S(n,Hn,h),I(Hn,Mn),S(n,Nn,h),S(n,Dn,h),I(Dn,$n),S(n,On,h),S(n,Gn,h),I(Gn,Rn),S(n,jn,h),S(n,Cn,h),I(Cn,zn),S(n,Un,h),S(n,Fn,h),Fn.innerHTML='<code class="language-cpp"><span class="token comment">// Include the AccelStepper library:</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;AccelStepper.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Servo.h></span></span>\n<span class="token comment">// Define stepper motor connections and motor interface type. </span>\n<span class="token comment">// Motor interface type must be set to 1 when using a driver:</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">dirPin</span> <span class="token expression"><span class="token number">2</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">stepPin</span> <span class="token expression"><span class="token number">3</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">flywheelPin</span> <span class="token expression"><span class="token number">4</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pusherPin</span> <span class="token expression"><span class="token number">5</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">motorInterfaceType</span> <span class="token expression"><span class="token number">1</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">servoPin</span> <span class="token expression"><span class="token number">8</span></span></span>\n<span class="token comment">// Create a new instance of the AccelStepper class:</span>\nAccelStepper stepper <span class="token operator">=</span> <span class="token function">AccelStepper</span><span class="token punctuation">(</span>motorInterfaceType<span class="token punctuation">,</span> stepPin<span class="token punctuation">,</span> dirPin<span class="token punctuation">)</span><span class="token punctuation">;</span> \nServo servo<span class="token punctuation">;</span>\n<span class="token keyword">bool</span> usingRunSpeed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">pinMode</span><span class="token punctuation">(</span>flywheelPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">pinMode</span><span class="token punctuation">(</span>pusherPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Set the maximum speed and acceleration:</span>\n  stepper<span class="token punctuation">.</span><span class="token function">setMaxSpeed</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  stepper<span class="token punctuation">.</span><span class="token function">setAcceleration</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  servo<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>servoPin<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  servo<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    String in <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">readStringUntil</span><span class="token punctuation">(</span><span class="token string">\'&#92;n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">switch</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">//runspeed?</span>\n      <span class="token keyword">case</span> <span class="token string">\'m\'</span><span class="token operator">:</span>\n        usingRunSpeed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">\'M\'</span><span class="token operator">:</span>\n        usingRunSpeed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token comment">//stepper</span>\n      <span class="token keyword">case</span> <span class="token string">\'s\'</span><span class="token operator">:</span>\n      <span class="token punctuation">&#123;</span>\n        <span class="token keyword">float</span> newSpeed <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        stepper<span class="token punctuation">.</span><span class="token function">setSpeed</span><span class="token punctuation">(</span>newSpeed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stepper speed set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span> \n      <span class="token comment">// stepper to position</span>\n      <span class="token keyword">case</span> <span class="token string">\'T\'</span><span class="token operator">:</span>\n      <span class="token punctuation">&#123;</span>\n        <span class="token keyword">float</span> absolutePos <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        stepper<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>absolutePos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stepper pos set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token punctuation">&#125;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token comment">//Servo</span>\n      <span class="token keyword">case</span> <span class="token string">\'S\'</span><span class="token operator">:</span> \n      <span class="token punctuation">&#123;</span>\n        <span class="token keyword">float</span> newAngle <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n        servo<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>newAngle<span class="token punctuation">)</span><span class="token punctuation">;</span> \n        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Servo angle set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">\'F\'</span><span class="token operator">:</span>\n        <span class="token function">digitalWrite</span><span class="token punctuation">(</span>flywheelPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> \n        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Flywheel pin set high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">\'f\'</span><span class="token operator">:</span>\n        <span class="token function">digitalWrite</span><span class="token punctuation">(</span>flywheelPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Flywheel pin set low"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">\'P\'</span><span class="token operator">:</span>\n        <span class="token function">digitalWrite</span><span class="token punctuation">(</span>pusherPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pusher pin set high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">\'p\'</span><span class="token operator">:</span>\n        <span class="token function">digitalWrite</span><span class="token punctuation">(</span>pusherPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pusher pin set low"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token operator">:</span> \n        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unknown command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>usingRunSpeed<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>\n    stepper<span class="token punctuation">.</span><span class="token function">runSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n    stepper<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',S(n,Ln,h),S(n,Wn,h),I(Wn,qn),S(n,Kn,h),S(n,Bn,h),I(Bn,Jn),I(Bn,Vn),I(Vn,Xn),I(Bn,Qn),S(n,Yn,h),S(n,Zn,h),I(Zn,ns),S(n,ss,h),S(n,as,h),as.innerHTML='<code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> <span class="token keyword">not</span> video_capture<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Unable to load camera"</span><span class="token punctuation">)</span>\n        sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n        <span class="token keyword">pass</span>\n    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> video_capture<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># Process frame</span>\n    datum <span class="token operator">=</span> op<span class="token punctuation">.</span>Datum<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    datum<span class="token punctuation">.</span>cvInputData <span class="token operator">=</span> frame\n    opWrapper<span class="token punctuation">.</span>emplaceAndPop<span class="token punctuation">(</span>op<span class="token punctuation">.</span>VectorDatum<span class="token punctuation">(</span><span class="token punctuation">[</span>datum<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    output_frame <span class="token operator">=</span> datum<span class="token punctuation">.</span>cvOutputData<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>\n    <span class="token keyword">if</span> datum<span class="token punctuation">.</span>poseKeypoints <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> datum<span class="token punctuation">.</span>poseKeypoints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>\n            neck_x<span class="token punctuation">,</span> neck_y<span class="token punctuation">,</span> neck_score <span class="token operator">=</span> datum<span class="token punctuation">.</span>poseKeypoints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n            <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>neck_x <span class="token operator">-</span> WIDTH<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> ATTACK_MARGIN <span class="token keyword">and</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>neck_y <span class="token operator">-</span> HEIGHT<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> ATTACK_MARGIN<span class="token punctuation">:</span>\n                set_flywheel_on<span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token keyword">if</span> first_lock_time <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>\n                    first_lock_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>\n                    \n                <span class="token keyword">if</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> first_lock_time <span class="token operator">></span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>seconds <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n                    set_pusher_on<span class="token punctuation">(</span><span class="token punctuation">)</span>\n                    <span class="token keyword">if</span> <span class="token keyword">not</span> pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>music<span class="token punctuation">.</span>get_busy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n                        pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>music<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span> \n\n                    cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>output_frame<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>neck_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>neck_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n                <span class="token keyword">else</span><span class="token punctuation">:</span>\n                    cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>output_frame<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>neck_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>neck_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n            <span class="token keyword">else</span><span class="token punctuation">:</span>\n                first_lock_time <span class="token operator">=</span> <span class="token boolean">None</span>\n                cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>output_frame<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>neck_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>neck_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n                set_flywheel_off<span class="token punctuation">(</span><span class="token punctuation">)</span>\n                set_pusher_off<span class="token punctuation">(</span><span class="token punctuation">)</span>\n            new_speed <span class="token operator">=</span> stepper_pid<span class="token punctuation">(</span>neck_x<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>new_speed<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>\n                new_speed <span class="token operator">=</span> <span class="token number">0</span>\n            set_stepper_speed<span class="token punctuation">(</span>new_speed<span class="token punctuation">)</span>\n\n            <span class="token comment"># Servo</span>\n            new_angle_delta <span class="token operator">=</span> servo_pid<span class="token punctuation">(</span>neck_y<span class="token punctuation">)</span>\n            angle <span class="token operator">+=</span> new_angle_delta\n            angle <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> angle<span class="token punctuation">)</span>\n            angle <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> angle<span class="token punctuation">)</span>\n            set_servo_angle<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            first_lock_time <span class="token operator">=</span> <span class="token boolean">None</span>\n            set_pusher_off<span class="token punctuation">(</span><span class="token punctuation">)</span>\n            set_flywheel_off<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n            nonzero <span class="token operator">=</span> datum<span class="token punctuation">.</span>poseKeypoints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span>\n            nonzero_keypoints <span class="token operator">=</span> datum<span class="token punctuation">.</span>poseKeypoints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> nonzero<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>\n            <span class="token keyword">if</span> nonzero_keypoints<span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n                x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> a <span class="token operator">=</span> nonzero_keypoints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n                new_speed <span class="token operator">=</span> stepper_pid<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n                <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>new_speed<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>\n                    new_speed <span class="token operator">=</span> <span class="token number">0</span>\n                set_stepper_speed<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        first_lock_time <span class="token operator">=</span> <span class="token boolean">None</span>\n        set_pusher_off<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        set_flywheel_off<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        \n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>',S(n,ts,h),S(n,ps,h),I(ps,es)},p:A,d(n){n&&y(s),n&&y(t),n&&y(p),n&&y(k),n&&y(T),n&&y(x),n&&y(H),n&&y(N),n&&y(D),n&&y(O),n&&y(G),n&&y(j),n&&y(C),n&&y(B),n&&y(J),n&&y(X),n&&y(Q),n&&y(Z),n&&y(nn),n&&y(an),n&&y(tn),n&&y(en),n&&y(on),n&&y(un),n&&y(ln),n&&y(kn),n&&y(hn),n&&y(dn),n&&y(fn),n&&y(wn),n&&y(yn),n&&y(vn),n&&y(_n),n&&y(Sn),n&&y(In),n&&y(xn),n&&y(Hn),n&&y(Nn),n&&y(Dn),n&&y(On),n&&y(Gn),n&&y(jn),n&&y(Cn),n&&y(Un),n&&y(Fn),n&&y(Ln),n&&y(Wn),n&&y(Kn),n&&y(Bn),n&&y(Yn),n&&y(Zn),n&&y(ss),n&&y(as),n&&y(ts),n&&y(ps)}}}function x(n){let s,a;const k=[n[0],H];let h={$$slots:{default:[E]},$$scope:{ctx:n}};for(let p=0;p<k.length;p+=1)h=t(h,k[p]);return s=new T({props:h}),{c(){p(s.$$.fragment)},l(n){e(s.$$.fragment,n)},m(n,t){o(s,n,t),a=!0},p(n,[a]){const t=1&a?c(k,[1&a&&u(n[0]),0&a&&u(H)]):{};2&a&&(t.$$scope={dirty:a,ctx:n}),s.$set(t)},i(n){a||(l(s.$$.fragment,n),a=!0)},o(n){i(s.$$.fragment,n),a=!1},d(n){r(s,n)}}}const H={title:"Nerf Turret",published:"2021-01-1",author:"raytran",thumbnail:"nerf-turret/turret.jpg",summary:"A robot nerf turret with computer vision (Openpose).",layout:"blog",tags:"personal, physical-object, openpose"};function M(n,s,a){return n.$$set=n=>{a(0,s=t(t({},s),k(n)))},[s=k(s)]}class N extends n{constructor(n){super(),s(this,n,M,x,a,{})}}var D=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:N,metadata:H});export{N,D as _,H as m};
